import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import groovy.json.JsonSlurper;
node {
    def PULL_REQUEST = env.BUILD_ID
    def CHANGE_BRANCH = env.BRANCH_NAME
    def CHANGE_TARGET = ("${env.BRANCH_NAME***REMOVED***".contains("release")||"${env.BRANCH_NAME***REMOVED***".contains("hot***REMOVED***x")) ? "master" : "release";
    projectName =  determineRepoName()
    projectGit = "Kushki/${projectName***REMOVED***"
    ENVIRONMENT = "ci"
    commit_id = ""
    RUNSCOPE_ENV = ""
    RUNSCOPE_SUITE_TEST = ""
    DISTRIBUTION_ARRAY=""
    sh "echo ${projectName***REMOVED*** - ${projectGit***REMOVED***"
        stage('Pull') {
         git branch: "${CHANGE_BRANCH***REMOVED***", url: "git@github.com:${projectGit***REMOVED***.git"
         sh "git rev-parse HEAD > .git/commit-id"
         commit_id = readFile('.git/commit-id')
         commit_id = commit_id.split("\n")[0]
         sh "git show --format='%ae' $commit_id  > .git/commit-author"
         GIT_AUTHOR_EMAIL  = readFile('.git/commit-author')
         GIT_AUTHOR_EMAIL = GIT_AUTHOR_EMAIL.split("\n")[0]
***REMOVED***
        stage('Con***REMOVED***g ***REMOVED***les') {
                  parallel(
                  stg:{createEnv("stg")***REMOVED***,
                  ci:{createEnv("ci")***REMOVED***,
                  qa:{createEnv("qa")***REMOVED***,
                  )***REMOVED***
          stage('Test and build') {
          parallel(
          createCIArtifact:{
          if ("${CHANGE_TARGET***REMOVED***".contains("release")) {

          awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id***REMOVED***.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "ci/${projectName***REMOVED***/PR${PULL_REQUEST***REMOVED***/", artifactTypeOverride: 'S3',  buildSpecFile: '', buildTimeoutOverride: '10', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, ci ***REMOVED***, {USRV_COMMIT, $commit_id***REMOVED***, {USRV_BRANCH,$CHANGE_BRANCH***REMOVED*** ]", gitCloneDepthOverride: '', projectName: 'usrv_back_java_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
  ***REMOVED******REMOVED***,
          createQAArtifact:{
          if ("${CHANGE_TARGET***REMOVED***".contains("master")) {

          awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id***REMOVED***.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "qa/${projectName***REMOVED***/PR${PULL_REQUEST***REMOVED***/", artifactTypeOverride: 'S3',  buildSpecFile: '', buildTimeoutOverride: '10', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, qa ***REMOVED***, {USRV_COMMIT, $commit_id***REMOVED***, {USRV_BRANCH,$CHANGE_BRANCH***REMOVED*** ]", gitCloneDepthOverride: '', projectName: 'usrv_back_java_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
  ***REMOVED******REMOVED***,
          createSTGArtifact:{
          if ("${CHANGE_TARGET***REMOVED***".contains("master")) {

          awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id***REMOVED***.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "stg/${projectName***REMOVED***/PR${PULL_REQUEST***REMOVED***/", artifactTypeOverride: 'S3',  buildSpecFile: '', buildTimeoutOverride: '10', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, stg ***REMOVED***, {USRV_COMMIT, $commit_id***REMOVED***, {USRV_BRANCH,$CHANGE_BRANCH***REMOVED*** ]", gitCloneDepthOverride: '', projectName: 'usrv_back_java_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
    ***REMOVED***
  ***REMOVED***,
          testingCode:{

              awsCodeBuild artifactLocationOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins', envParameters: '', envVariables: "[ { USRV_STAGE, $ENVIRONMENT ***REMOVED***]", gitCloneDepthOverride: '', projectName: 'usrv_back_java_testing', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
      ***REMOVED***

          )
***REMOVED***
        if ("${CHANGE_TARGET***REMOVED***".contains("release")) {
            ENVIRONMENT = "ci"
***REMOVED***
        if ("${CHANGE_TARGET***REMOVED***".contains("master")) {
            ENVIRONMENT = "qa"
***REMOVED***
        stage ("deploy $ENVIRONMENT") {
        sh "aws ssm get-parameters --names /${ENVIRONMENT***REMOVED***/${projectName***REMOVED***/DISTRIBUTION_ARRAY --region us-east-1 --query \"Parameters[0].Value\" > .tmp"
        DISTRIBUTION_ARRAY  = readFile('.tmp')
        DISTRIBUTION_ARRAY = DISTRIBUTION_ARRAY.split("\n")[0].replace('"', "")

        awsCodeBuild artifactLocationOverride: '', artifactNameOverride: '', artifactNamespaceOverride: '', artifactPackagingOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '10', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins', envParameters: '', envVariables: "[{ USRV_STAGE, $ENVIRONMENT ***REMOVED***, {USRV_COMMIT, $commit_id***REMOVED***, {USRV_BRANCH,$CHANGE_BRANCH***REMOVED***, { ARTIFACT, s3://artifact-build-des/$ENVIRONMENT/${projectName***REMOVED***/PR${PULL_REQUEST***REMOVED***/${commit_id***REMOVED***.zip ***REMOVED***, {FINAL_BUCKET, s3://${projectName***REMOVED***-${ENVIRONMENT***REMOVED*** ***REMOVED***,{DISTRIBUTION_ARRAY, ${DISTRIBUTION_ARRAY***REMOVED*** ***REMOVED***]", gitCloneDepthOverride: '', projectName: 'front_deploy', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'project', sourceVersion: '', sseAlgorithm: 'AES256'

        notifyRollbar(ENVIRONMENT,projectName, commit_id, GIT_AUTHOR_EMAIL)
***REMOVED***
        stage('Integration') {
        parallel(
        runscopeTest:{
        functionalTests(ENVIRONMENT)
 ***REMOVED***
        )
***REMOVED***
        if ("${CHANGE_TARGET***REMOVED***".contains("master")) {
        ENVIRONMENT = "stg"
         stage ("deploy $ENVIRONMENT") {
         sh "aws ssm get-parameters --names /${ENVIRONMENT***REMOVED***/${projectName***REMOVED***/DISTRIBUTION_ARRAY --region us-east-1 --query \"Parameters[0].Value\" > .tmp"
         DISTRIBUTION_ARRAY  = readFile('.tmp')
         DISTRIBUTION_ARRAY = DISTRIBUTION_ARRAY.split("\n")[0].replace('"', "")

         awsCodeBuild artifactLocationOverride: '', artifactNameOverride: '', artifactNamespaceOverride: '', artifactPackagingOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS',  buildSpecFile: '', buildTimeoutOverride: '10', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins', envParameters: '', envVariables: "[{ USRV_STAGE, $ENVIRONMENT ***REMOVED***, {USRV_COMMIT, $commit_id***REMOVED***, {USRV_BRANCH,$CHANGE_BRANCH***REMOVED***, { ARTIFACT, s3://artifact-build-des/$ENVIRONMENT/${projectName***REMOVED***/PR${PULL_REQUEST***REMOVED***/${commit_id***REMOVED***.zip ***REMOVED***, {FINAL_BUCKET, s3://${projectName***REMOVED***-${ENVIRONMENT***REMOVED*** ***REMOVED***,{DISTRIBUTION_ARRAY, ${DISTRIBUTION_ARRAY***REMOVED*** ***REMOVED***]", gitCloneDepthOverride: '', projectName: 'front_deploy', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'project', sourceVersion: '', sseAlgorithm: 'AES256'

 ***REMOVED***
         notifyRollbar(ENVIRONMENT,projectName, commit_id, GIT_AUTHOR_EMAIL)
***REMOVED***
***REMOVED***
String determineRepoName() {
    return "${env.JOB_NAME***REMOVED***".tokenize('/')[1]
***REMOVED***
def functionalTests(String environment) {
         sh "aws ssm get-parameters --names /${environment***REMOVED***/${projectName***REMOVED***/RUNSCOPE_SUITE_TEST --region us-east-1 --query \"Parameters[0].Value\" > .tmp${environment***REMOVED***"
         RUNSCOPE_SUITE_TEST  = readFile(".tmp${environment***REMOVED***")
         RUNSCOPE_SUITE_TEST = RUNSCOPE_SUITE_TEST.split("\n")[0]
         sh "aws ssm get-parameters --names /${environment***REMOVED***/${projectName***REMOVED***/RUNSCOPE_ENV --region us-east-1 --query \"Parameters[0].Value\" > .tmp${environment***REMOVED***"
         RUNSCOPE_ENV  = readFile(".tmp${environment***REMOVED***")
         RUNSCOPE_ENV = RUNSCOPE_ENV.split("\n")[0]
         timeout(time: 600, unit: 'SECONDS') {
            hook = registerWebhook()
            sh """
                curl --fail -X GET https://api.runscope.com/radar/${RUNSCOPE_SUITE_TEST***REMOVED***/trigger \
                -d runscope_environment=${RUNSCOPE_ENV***REMOVED*** \
                -d runscope_noti***REMOVED***cation_url=${hook.getURL()***REMOVED***
            """
        def dataAsstring = waitForWebhook hook
        def props = readJSON text: '{' + dataAsstring.substring(dataAsstring.indexOf("team_id")-1 ,dataAsstring.indexOf("test_run_id")-3) + '***REMOVED***'
        echo "Review : ${props.test_run_url***REMOVED***"
        assert (props.result == "pass") : "Runscope fail! ಥ_ಥ. better luck next time"
        echo "Hi :) : everything is gonna be alright"
***REMOVED***
***REMOVED***
def createEnv(String environment) {
    def ***REMOVED***leName =  ".env-${environment***REMOVED***.json"
    stage("create environment: ${environment***REMOVED***") {
        sh "aws ssm get-parameters-by-path  --path /${environment***REMOVED***/${projectName***REMOVED***/ --region us-east-1  > .preMustache${environment***REMOVED***"
        def name  = ""
        def result = readJSON ***REMOVED***le: ".preMustache${environment***REMOVED***"
                sh "rm -f ${***REMOVED***leName***REMOVED*** || true"
                sh "touch ${***REMOVED***leName***REMOVED***"
                sh "echo '{\"a\":\"b\" '  >> ${***REMOVED***leName***REMOVED***"
            result.Parameters.each{
            name = "${it.Name***REMOVED***".tokenize('/')[-1]
                 sh " echo ', \"${name***REMOVED***\":\"${it.Value***REMOVED***\"' >> ${***REMOVED***leName***REMOVED***"
    ***REMOVED***
            sh "echo \"***REMOVED***\" >> ${***REMOVED***leName***REMOVED***"
***REMOVED***
            sh "cat ${***REMOVED***leName***REMOVED***"
***REMOVED***
def notifyRollbar(String environment, String projectName, String commit_id, String GIT_AUTHOR_EMAIL ){
             sh "aws ssm get-parameters --names /${environment***REMOVED***/${projectName***REMOVED***/ROLLBAR_TOKEN --region us-east-1 --query \"Parameters[0].Value\" > .tmp"
             def ROLLBAR_TOKEN  = readFile('.tmp')
             ROLLBAR_TOKEN = ROLLBAR_TOKEN.split("\n")[0]
             stage('Notify Rollbar') {

       sh """
                curl --fail -X POST https://api.rollbar.com/api/1/deploy/ \
                   -F access_token=$ROLLBAR_TOKEN \
                   -F environment=$environment \
                   -F revision=$commit_id \
                   -F local_username=$GIT_AUTHOR_EMAIL
            """

***REMOVED***
***REMOVED***
