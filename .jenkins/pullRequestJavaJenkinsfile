import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import groovy.json.JsonSlurper;
node {
    def PULL_REQUEST = env.BUILD_ID
    def CHANGE_BRANCH = env.BRANCH_NAME
    def CHANGE_TARGET = ("${env.BRANCH_NAME}".contains("release")||"${env.BRANCH_NAME}".contains("hot***REMOVED***x")) ? "master" : "release";
    projectName =  determineRepoName()
    projectGit = "Kushki/${projectName}"
    ENVIRONMENT = "uat"
    commit_id = ""
    sh "echo ${projectName} - ${projectGit}"
        if ("${CHANGE_TARGET}".contains("release")) {
                    ENVIRONMENT = "ci"
                }
                if ("${CHANGE_TARGET}".contains("master")) {
                    ENVIRONMENT = "qa"
                }
        stage('Pull') {
         git branch: "${CHANGE_BRANCH}", url: "git@github.com:${projectGit}.git"
         sh "git rev-parse HEAD > .git/commit-id"
         commit_id = readFile('.git/commit-id')
         commit_id = commit_id.split("\n")[0]
         sh "git show --format='%ae' $commit_id  > .git/commit-author"
         GIT_AUTHOR_EMAIL  = readFile('.git/commit-author')
         GIT_AUTHOR_EMAIL = GIT_AUTHOR_EMAIL.split("\n")[0]
        }

         stage('Con***REMOVED***g ***REMOVED***les') {

                                  qa:{createEnv("qa")}
                                  }

          stage('Test') {
                    awsCodeBuild artifactLocationOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS',  buildSpecFile: '', buildTimeoutOverride: '', credentialsId: 'awsCodeBuildCredentialOK', credentialsType: 'jenkins', envParameters: '', envVariables: "[ { USRV_STAGE, $ENVIRONMENT }]", gitCloneDepthOverride: '', projectName: 'usrv_back_java_testing', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
          }


    }
String determineRepoName() {
    return "${env.JOB_NAME}".tokenize('/')[1]
}

def functionalTests(String environment) {
         sh "aws ssm get-parameters --names /${environment}/${projectName}/RUNSCOPE_SUITE_TEST --region us-east-1 --query \"Parameters[0].Value\" > .tmp${environment}"
         RUNSCOPE_SUITE_TEST  = readFile(".tmp${environment}")
         RUNSCOPE_SUITE_TEST = RUNSCOPE_SUITE_TEST.split("\n")[0]
         sh "aws ssm get-parameters --names /${environment}/${projectName}/RUNSCOPE_ENV --region us-east-1 --query \"Parameters[0].Value\" > .tmp${environment}"
         RUNSCOPE_ENV  = readFile(".tmp${environment}")
         RUNSCOPE_ENV = RUNSCOPE_ENV.split("\n")[0]
         timeout(time: 600, unit: 'SECONDS') {
            hook = registerWebhook()
            sh """
                curl --fail -X GET https://api.runscope.com/radar/${RUNSCOPE_SUITE_TEST}/trigger \
                -d runscope_environment=${RUNSCOPE_ENV} \
                -d runscope_noti***REMOVED***cation_url=${hook.getURL()}
            """
        def dataAsstring = waitForWebhook hook
        def props = readJSON text: '{' + dataAsstring.substring(dataAsstring.indexOf("team_id")-1 ,dataAsstring.indexOf("test_run_id")-3) + '}'
        echo "Review : ${props.test_run_url}"
        assert (props.result == "pass") : "Runscope fail! ಥ_ಥ. better luck next time"
        echo "Hi :) : everything is gonna be alright"
        }
    }
def createEnv(String environment) {
    def ***REMOVED***leName =  ".env-${environment}.json"
    stage("create environment: ${environment}") {
        sh "aws ssm get-parameters-by-path  --path /${environment}/${projectName}/ --region us-east-1  > .preMustache${environment}"
        def name  = ""
        def result = readJSON ***REMOVED***le: ".preMustache${environment}"
                sh "rm -f ${***REMOVED***leName} || true"
                sh "touch ${***REMOVED***leName}"
                sh "echo '{\"a\":\"b\" '  >> ${***REMOVED***leName}"
            result.Parameters.each{
            name = "${it.Name}".tokenize('/')[-1]
                 sh " echo ', \"${name}\":\"${it.Value}\"' >> ${***REMOVED***leName}"
            }
            sh "echo \"}\" >> ${***REMOVED***leName}"
        }
            sh "cat ${***REMOVED***leName}"
    }

